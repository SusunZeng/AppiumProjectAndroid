# # #coding=utf-8
# #
# # # from publicMethod import loginApp
# # # import sys
# # # import importlib
# # # importlib.reload(sys)
# # # # reload(sys)   python 2.X版本
# # # # sys.setdefaultencoding('utf-8')
# # # sys.path.append("E:\AppiumProjectAndroid\public")
# # #
# # # # 单独调用startApp()
# # # # startApp.startApp().startApp()
# # # # publicFunction.publicFunction().startApp()
# # # loginApp.loginApp().loginApp()
# #
# # # from util.pop_up_box import *
# #
# # # pop_up_box = pop_up_box()
# # # print(pop_up_box)
# #
# # # for i in range(1, 6):
# # #     if a = ''
# # #     print('案例名分别为：' + 'test_' + str(i))
# #
# # # abc = get_lines
# # # allow =
# # # passname =
# # # for i in row(1, abc):
# # #     if allow == 'y' and passname == ''
# # #         if True:
# # #             print('案例名分别为：' + 'test_' + str(i))
# #
# ## 调试添加按照i在for循环里做的test案例执行
# # # coding=utf-8
import sys
sys.path.append("E:\\AppiumProjectAndroid")
import unittest
import HTMLTestReportCN
import threading
import multiprocessing
from util.server import Server
import time
from appium import webdriver
# from business.login_business import LoginBusiness
from util.write_user_command import WriteUserCommand


class ParameTestCase(unittest.TestCase):
    def __init__(self, methodName='runTest', parame=None):
        super(ParameTestCase, self).__init__(methodName)
        global parames
        parames = parame


class CaseTest(ParameTestCase):
    @classmethod
    def setUpClass(cls):
        print("setUpclass---->", parames)
        # cls.login_business = LoginBusiness(parames)

    def setUp(self):
        print("this is setup\n")

    def test_01(self):
        print("test case 里面的参数", parames)
        print("this is case01\n")
        print('验证值：',self.assertEqual('1', '1', '验证失败'))
        code = '取款密码输入不正确'
        print('验证值：', self.assertEqual(code, '取款密码输入不正确', '验证失败'))
        self.assertEqual('dkkdkkd', '取款密码输入不正确', '验证失败')

        # self.login_business.login_pass()

    # self.assertNotEqual(1,2)
    # self.assertTrue(flag)
    # self.assertFalse(flag)
    # @unittest.skip("CaseTest")
    def test_02(self):
        # self.login_business.login_user_error()
        print("this is case02\n")
        self.assertEqual('1', '0', '验证失败')
        self.assertEqual('dkkdkkddfd', '取款密码输入不正确', '验证失败')
        self.assertTrue(True)

    def test_03(self):
        # self.login_business.login_user_error()
        print("this is case03\n")
        self.assertEqual('1', '1', '验证失败')
        self.assertTrue(True)

    def tearDown(self):
        time.sleep(1)
        print("this is teardown\n")
        # if sys.exc_info()[0]:
        #     self.login_business.login_handle.login_page.driver.save_screenshot("../jpg/test02.png")

    @classmethod
    def tearDownClass(cls):
        time.sleep(1)
        print("this is class teardown\n")
    # cls.driver.quit()


def appium_init():
    server = Server()
    server.main()


def get_suite(i):
    print("get_suite里面的", i)
    suite = unittest.TestSuite()
    suite.addTest(CaseTest("test_02", parame=i))
    suite.addTest(CaseTest("test_01", parame=i))
    suite.addTest(CaseTest("test_03", parame=i))
    # unittest.TextTestRunner().run(suite)
    html_file = "E:\\AppiumProjectAndroid\\report\\report" + str(i) + ".html"
    # fp = open(html_file, "wb")
    # HTMLTestReportCN.HTMLTestRunner(stream=fp).run(suite)

    fp = open(html_file, 'wb')
    runner = HTMLTestReportCN.HTMLTestRunner(
        stream=fp,
        title='自动化测试报告',
        tester='Susun.Zeng',
        # description = 'generated by HTMLTestRunner.',
        verbosity = 2
    )
    runner.run(suite)
    fp.close()


# def get_count():
#     write_user_file = WriteUserCommand()
#     count = write_user_file.get_file_lines()
#     return count


if __name__ == '__main__':
    # appium_init()
    # get_suite(0)
    threads = []
    for i in range(2):
        print(i)
        t = multiprocessing.Process(target=get_suite, args=(i,))
        threads.append(t)
    for j in threads:
        j.start()
    time.sleep(1)
# # # time.sleep(80)
# #
# #
# #
# #
# #
#
# # #  调试引用值
# # from base.driver_init import DriverInit
# # def print_abS():
# #     print('引用值：', DriverInit.driverInit)
#
#
#
# # 琦哥写的
# # import sys, time
# # sys.setdefaultencoding('utf-8')
# # import openpyxl
# #
# # def get_case_value(file_path, sheet_name, case_name, column_name):
# #     idx = get_column_idx(file_path, sheet_name, column_name)
# #     wb = openpyxl.load_workbook(file_path)
# #     ws = wb.get_sheet_by_name(sheet_name)
# #     for i in range(1, ws.max_row+1):
# #         if ws.cell(row=i, column=1).value == case_name:
# #             break
# #     wb.close()
# #     return ws.cell(row=i, column=idx).value
# #
# #
# # def get_column_idx(file_path, sheet_name, column_name):
# #     wb = openpyxl.load_workbook(file_path)
# #     ws = wb.get_sheet_by_name(sheet_name)
# #     for i in range(1, ws.max_column+1):
# #         if ws.cell(row=1, column=i).value == column_name:
# #             break
# #     wb.close()
# #     return i
# #
# # def get_case_list(file_path, sheet_name, case_name):
# #     wb = openpyxl.load_workbook(file_path)
# #     ws = wb.get_sheet_by_name(sheet_name)
# #     for i in range(1, ws.max_row+1):
# #         if ws.cell(row=i, column=1).value == case_name:
# #             break
# #     lists = []
# #     for j in range(2, ws.max_column+1):
# #         lists.append(ws.cell(row=i, column=j).value)
# #     wb.close()
# #     return lists
#
# # 调试如何得到字符串的长度
# # abd = ' 长 度 '
# # abd_length = len(abd)
# # print('长度：',abd_length)
# # abd_compare = (abd_length > 2)
# # print('比较：',abd_compare)
#
# # abS1 = [<appium.webdriver.webelement.WebElement (session="dc8716f0-0496-4ebc-b644-cc6a95d8fe77", element="26")>,<appium.webdriver.webelement.WebElement (session="dc8716f0-0496-4ebc-b644-cc6a95d8fe77", element="27")>]
# # abS11 = abS1.split(",")
# # print('abS11:',abS11)
# # abE = [<123>,<345>]
# # print('abS1:',abS1)
# # abS = ['<appium.webdriver.webelement.WebElement (session="dc8716f0-0496-4ebc-b644-cc6a95d8fe77", element="26")>',
# # '<appium.webdriver.webelement.WebElement (session="dc8716f0-0496-4ebc-b644-cc6a95d8fe77", element="27")>']
# # abR = ['1','2','3']
# # abS_length = len(abS)
# # abR_length = len(abR)
# # print('长度列表：',abS_length)
# # print('长度字典：',abR_length)
# # ab_compare = (abS_length < abR_length)
# # print('对比结果：',ab_compare)
#
# # 调试日期+序号的生成
#
# #! /usr/bin/env python
# #coding=utf-8
# # # 获取今天、昨天和明天的日期
# # # 引入datetime模块
# # import datetime
# # #计算今天的时间
# # today = datetime.date.today()
# # #计算昨天的时间
# # yesterday = today - datetime.timedelta(days = 1)
# # #计算明天的时间
# # tomorrow = today + datetime.timedelta(days = 1)
# # #打印这三个时间
# # print(yesterday, today, tomorrow)
#
#
# # # ! /usr/bin/env python
# # # coding=utf-8
# # # 计算上一个的时间
# # # 引入datetime,calendar两个模块
# # import datetime, calendar
# #
# # last_friday = datetime.date.today()
# # oneday = datetime.timedelta(days=1)
# #
# # while last_friday.weekday() != calendar.FRIDAY:
# #     last_friday -= oneday
# #
# # print(last_friday.strftime('%A, %d-%b-%Y'))
#
# # # ! /usr/bin/env python
# # # coding=utf-8
# # # 借助模运算，可以一次算出需要减去的天数，计算上一个星期五
# # # 同样引入datetime,calendar两个模块
# # import datetime
# # import calendar
# #
# # today = datetime.date.today()
# # target_day = calendar.FRIDAY
# # this_day = today.weekday()
# # delta_to_target = (this_day - target_day) % 7
# # last_friday = today - datetime.timedelta(days=delta_to_target)
# #
# # print(last_friday.strftime("%d-%b-%Y"))
#
# # # ! /usr/bin/env python
# # # coding=utf-8
# # # 以需要的时间间隔执行某个命令
# #
# # import time, os
# #
# #
# # def re_exe(cmd, inc=60):
# #     while True:
# #         os.system(cmd);
# #         time.sleep(inc)
# #
# #
# # re_exe("echo %time%", 5)
#
# # #coding=utf-8
# # '''
# # 日期转换成str
# # '''
# # from datetime import datetime
# # now = datetime.now()
# # print(now)
# # strnow = datetime.strftime(now,'%Y-%m-%d %H:%M:%S')
# # print('yyyy-MM-dd hh:MM:ss：',strnow)
# # strnow1 = datetime.strftime(now,'%Y%m%d')
# # print('yyyyMMdd：',strnow1)
# # strnow2 = datetime.strftime(now,'%Y-%m-%d')
# # print('yyyy-MM-dd：',strnow2)
# #
# # for i in range(2):
# #     txt_name = "report"+strnow1+str(i)+".txt"
# #     print('文件名：',txt_name)
#
# # 验证得到的日期流水号
# # from util.date_number import DataNumber
# #
# # strnow_number = DataNumber()
# # print(strnow_number)
# #
# # for i in range(2):
# #     txt_name = "report"+strnow_number+str(i)+".txt"
# #     print('文件名：',txt_name)
#
# # 调试得到目标参数在列表排几位，返回i
# # def selectI():
# #     abs = '2'
# #     abS = ['<1>', '2', '<3>']
# #     abS_length = len(abS)
# #     # print('abS_length:',abS_length)
# #     # print('abs[0]:', abs[0])
# #     # print('abS[1]:',abS[1])
# #     for i in range(abS_length):
# #         # print('打印：', i)
# #         # print('abS['+str(i)+']:', abS[i])
# #         if abs == abS[i]:
# #             print('查找到：', i)
# #             # continue
# #             return i
# #         # break
# #     print('i值：', i)
# #     print('perfect')
# #
# #
# #     # selectI()
# #     print(selectI())
# # import re
# # # 找到226个，抽取数字
# # total = '找到226个'
# # totalC = re.sub("\D", "", total)
# # print('抽取出来的数字有：',totalC)
# # 调试把得到的信息写入列表
# # account_message = []
# # for i in range(3):
# #     acc_type = "acc_type" + str(i)
# #     account_balance = "account_balance" + str(i)
# #     regist_date = "regist_date" + str(i)
# #     print('值：',acc_type,",",account_balance,",",regist_date)
# #     acc_type = i+1
# #     acc_type1 = i+4
# #     account_message.append(acc_type)
# #     account_message.append(acc_type1)
# #     print(account_message)
# #     print(acc_type)
#
# #
#
# def query_transferG_input(self):
#     '''
#     用例编号：111CZSX022,所有功能-查询转账-快速转账
#     同行转账-正确输入金额-》步骤：进入快速转账，输入收款人姓名、账号，在银行列表选择同行进行转账，转账金额在（0，余额]之内
#     query_transfer_input：输入收款人信息来快速转账
#     :return:
#     '''
#     # 选择操作清单
#     # actionList = self.driver.find_element_by_id('com.gdnybank.m:id/recycler_shortcut')
#     # actionList.find_element_by_xpath('//*[contains(@text,"查询转账")]').click()
#     self.queryTransfer_handle.click_action_list_button('//*[contains(@text,"查询转账")]')
#     self.queryTransfer_handle.click_payee_message_button()
#     self.queryTransfer_handle.click_transfer_fast_button()
#     payee_name = self.opera_excel.get_cell(3, 7).value
#     print('payee_name:', payee_name)
#     self.queryTransfer_handle.send_payee_name_code(payee_name)
#     # payee_name = self.driver.find_element_by_id('com.gdnybank.m:id/m_combin_edit').get_attribute("text")
#     # print('收款人名：',payee_name)
#
#     # 判断当所输入账号与预期的不一致时，则输入，否则继续下一步选择银行名称
#     payee_account = self.opera_excel.get_cell(3, 8).value
#     print('payee_account:', payee_account)
#     # payee_account = 0
#     payee_account_after = 1
#     while payee_account != payee_account_after:
#         # payee_account = '6235 9574 0000 6141 031'
#         # 清除
#         self.queryTransfer_handle.clear_payee_account_code()
#         time.sleep(5)
#         # 输入银行账号
#         self.queryTransfer_handle.send_payee_account_code(payee_account)
#         # 获取输入后的银行账号
#         time.sleep(2)
#         payee_account_after = self.driver.find_elements_by_id('com.gdnybank.m:id/m_combin_edit')[1].get_attribute(
#             "text")
#         print('输入后银行账号：', payee_account_after)
#
#     self.queryTransfer_handle.click_transfer_bank_name_button()
#     time.sleep(2)
#     # print('银行列表元素：',self.driver.find_element_by_id('com.gdnybank.m:id/lv_bank_list').find_element_by_xpath('//*[contains(@text,"广东南粤银行")]'))
#     # self.driver.find_element_by_id('com.gdnybank.m:id/lv_bank_list').\
#     #     find_element_by_xpath('//*[contains(@text,"广东南粤银行")]').click()
#     payee_bank = self.opera_excel.get_cell(3, 9).value
#     print('payee_bank:', payee_bank)
#     self.queryTransfer_handle.click_bank_list_list(payee_bank)
#     time.sleep(2)
#     self.queryTransfer_handle.click_submit_transfer_button()
#     time.sleep(2)
#
#
# def query_transferG_select(self):
#     '''
#     用例编号：111CZSX039,所有功能-查询转账-快速转账
#     同行转账-正确输入金额-》步骤：进入快速转账，输入收款人姓名、账号，在银行列表选择同行进行转账，转账金额在（0，余额]之内
#     query_transfer_select：从收款人列表中选择账户来转账
#     :return:
#     '''
#     # 选择操作清单
#     self.queryTransfer_handle.click_action_list_button('//*[contains(@text,"查询转账")]')
#     self.queryTransfer_handle.click_payee_message_button()
#     self.queryTransfer_handle.click_transfer_fast_button()
#     # 选择账户姓名编辑框右侧的头像按钮
#     self.queryTransfer_handle.click_transfer_payee_head_button()
#     # 收款人信息页面
#     payee_name = self.opera_excel.get_cell(4, 7).value
#     print('payee_name:', payee_name)
#     self.queryTransfer_handle.click_bank_list_list(payee_name)
#     time.sleep(2)
#     self.queryTransfer_handle.click_submit_transfer_button()
#     time.sleep(2)
#
#
# def query_transfer_page(self):
#     '''
#     适用于转账，不论快速、普通、次日
#     这是在添加完收款人信息后，再进入的转账、验证码、取款密码输入、转账成功的页面
#     由于输入银行卡号和选择收款人前面不同流程，但后面的都一致，直接统一维护
#     作者：曾志坤，时间：20180411
#     :return:
#     '''
#     # 转账页面
#     # print('转账页面元素：',self.driver.find_elements_by_id('com.gdnybank.m:id/m_combin_edit'))
#     # self.driver.find_element_by_id('com.gdnybank.m:id/m_combin_edit').send_keys('10.00')
#     transfer_amount = self.opera_excel.get_cell(3, 10).value
#     print('transfer_amount', transfer_amount)
#     self.queryTransfer_handle.send_transfer_amount_code(transfer_amount)
#     self.public_method.swipe_on('up', 10000)
#     self.queryTransfer_handle.click_transfer_tips_head_button()
#     self.queryTransfer_handle.click_submit_transfer_button()
#     # 验证码和取款密码输入页面
#     self.public_method.swipe_on('up', 10000)
#     self.queryTransfer_handle.click_get_code_button()
#     # print('短信验证码：',self.driver.find_elements_by_id('com.gdnybank.m:id/m_combin_edit'))
#     self.queryTransfer_handle.send_input_code_code()
#     self.queryTransfer_handle.click_draw_password_button()
#     draw_password = self.opera_excel.get_cell(3, 6).value
#     print('draw_password', draw_password)
#     self.queryTransfer_handle.send_draw_password_code(draw_password)
#     self.queryTransfer_handle.click_input_code_code()  # 在输入取款密码后，银行自带键盘会挡住“转账”按钮
#     self.queryTransfer_handle.click_transfer_account_submit_button()
#     # 转账成功页面
#     time.sleep(3)
#     # transfer_submitted_mark = self.queryTransfer_handle.get_transfer_submitted_text()
#     transfer_submitted_mark = self.driver.find_element_by_id \
#         ('com.gdnybank.m:id/tv_repay_already_submit').get_attribute("text")
#     print('转账成功提示：', transfer_submitted_mark)
#
#     time.sleep(3)
#     # remaining_balance = self.queryTransfer_handle.get_remaining_balance_text()    #读取值失败
#     remaining_balance = self.driver.find_element_by_id \
#         ('com.gdnybank.m:id/tv_ava_balance_success').get_attribute("text")
#     print('余额：', remaining_balance)
#     # row_list = [3,4,20]
#     # self.opera_excel.write_value(4, 11, remaining_balance)
#     self.queryTransfer_handle.click_inform_success_button()  # 点击“好，我知道了”按钮后，跳转到移动银行主页
#     # 如果存在最新公告信息，则判断点击确认
#     for i in range(2):
#         keyword = '确认'
#         confirm = self.driver.find_element_by_class_name('android.widget.Button').get_attribute('text')
#         # print('弹框信息关键词：', confirm)
#         if keyword in confirm:
#             self.driver.find_element_by_class_name('android.widget.Button').click()
#
#     return transfer_submitted_mark
#
#
# def query_transferG_payee_space(self):
#     '''
#     用例编号：111CZSX023,所有功能-查询转账-快速转账
#     测试点：同行转账-收款人不填，步骤：收款人信息留空不填，预期结果：温馨提示：请输入收款人信息
#     :return:
#     '''
#
#     # 选择操作清单
#     self.queryTransfer_handle.click_action_list_button('//*[contains(@text,"查询转账")]')
#     self.queryTransfer_handle.click_payee_message_button()
#     self.queryTransfer_handle.click_transfer_fast_button()
#     # 不输入收款人信息，直接点击提交按钮
#     time.sleep(2)
#     self.queryTransfer_handle.click_submit_transfer_button()
#     # 取温馨提示属性，再返回
#     error_prompt = self.driver.find_element_by_id('com.gdnybank.m:id/tv_metion_msg').get_attribute('text')
#     print('温馨提示1：', error_prompt)
#     self.queryTransfer_handle.click_error_prompt_confirm_button()
#     # 返回到转账页面
#     self.queryTransfer_handle.click_left_head_button_button()
#     # 返回到移动银行主页面
#     self.queryTransfer_handle.click_left_head_button_button()
#     return error_prompt
#
#
# def query_transferG_amount_zero(self):
#     '''
#     用例编号：111CZSX024,所有功能-查询转账-快速转账
#     测试点：同行转账-金额为0，步骤：转账金额为0，预期结果：温馨提示：转账金额输入有误
#     :return:
#     '''
#     # 选择操作清单
#     self.query_transferG_select()
#     # 转账页面
#     self.public_method.swipe_on('up', 10000)
#     transfer_amount = self.opera_excel.get_cell(6, 10).value
#     print('transfer_amount:', transfer_amount)
#     self.queryTransfer_handle.send_transfer_amount_code(transfer_amount)
#     self.queryTransfer_handle.click_transfer_tips_head_button()
#     self.queryTransfer_handle.click_submit_transfer_button()
#     # 取温馨提示属性，再返回
#     error_prompt = self.driver.find_element_by_id('com.gdnybank.m:id/tv_metion_msg').get_attribute('text')
#     print('温馨提示2：', error_prompt)
#     self.queryTransfer_handle.click_error_prompt_confirm_button()
#     # 返回到移动银行主页面
#     self.queryTransfer_handle.click_left_head_button_button()
#     return error_prompt
#
#
# def query_transferG_beyond_balance(self):
#     '''
#     用例编号：111CZSX025,所有功能-查询转账-快速转账
#     测试点：同行转账-超出余额，步骤：转账金额大于可用余额，预期结果：温馨提示：余额不足
#     :return:
#     '''
#     # 选择操作清单
#     self.query_transferG_select()
#     # 转账页面
#     self.public_method.swipe_on('up', 10000)
#     transfer_amount = self.opera_excel.get_cell(7, 10).value
#     print('transfer_amount:', transfer_amount)
#     self.queryTransfer_handle.send_transfer_amount_code(transfer_amount)
#     self.queryTransfer_handle.click_transfer_tips_head_button()
#     self.queryTransfer_handle.click_submit_transfer_button()
#     # 取温馨提示属性，再返回
#     error_prompt = self.driver.find_element_by_id('com.gdnybank.m:id/tv_metion_msg').get_attribute('text')
#     print('温馨提示3：', error_prompt)
#     self.queryTransfer_handle.click_error_prompt_confirm_button()
#     # 返回到移动银行主页面
#     self.queryTransfer_handle.click_left_head_button_button()
#     return error_prompt
#
#
# def query_transferG_amount_space(self):
#     '''
#     用例编号：111CZSX026,所有功能-查询转账-快速转账
#     测试点：同行转账-金额不填，步骤：转账金额留空不填，预期结果：温馨提示：请输入转账金额
#     :return:
#     '''
#     # 选择操作清单
#     self.query_transferG_select()
#     # 转账页面
#     self.public_method.swipe_on('up', 10000)
#     # self.queryTransfer_handle.send_transfer_amount_code('100000')
#     self.queryTransfer_handle.click_transfer_tips_head_button()
#     self.queryTransfer_handle.click_submit_transfer_button()
#     # 取温馨提示属性，再返回
#     error_prompt = self.driver.find_element_by_id('com.gdnybank.m:id/tv_metion_msg').get_attribute('text')
#     print('温馨提示4：', error_prompt)
#     self.queryTransfer_handle.click_error_prompt_confirm_button()
#     # 返回到移动银行主页面
#     self.queryTransfer_handle.click_left_head_button_button()
#     return error_prompt
#
#
# def query_transferG_amount_capital(self):
#     '''
#     用例编号：111CZSX027,所有功能-查询转账-快速转账
#     测试点：同行转账-大写金额，步骤：输入金额后查看大写金额，预期结果：显示正确
#     :return:
#     '''
#     # 选择操作清单
#     self.query_transferG_select()
#     # 转账页面
#     self.public_method.swipe_on('up', 10000)
#     transfer_amount = self.opera_excel.get_cell(9, 10).value
#     print('transfer_amount:', transfer_amount)
#     self.queryTransfer_handle.send_transfer_amount_code(transfer_amount)
#     self.queryTransfer_handle.click_transfer_tips_head_button()
#     self.queryTransfer_handle.click_submit_transfer_button()
#     # 取温馨提示属性，再返回
#     error_prompt = self.driver.find_element_by_id('com.gdnybank.m:id/tv_metion_msg').get_attribute('text')
#     print('温馨提示5：', error_prompt)
#     self.queryTransfer_handle.click_error_prompt_confirm_button()
#     # 返回到移动银行主页面
#     self.queryTransfer_handle.click_left_head_button_button()
#     return error_prompt
#
#
# def query_transferG_payee_wrong(self):
#     '''
#     用例编号：111CZSX028,所有功能-查询转账-快速转账
#     测试点：同行转账-收方信息错误，步骤：进入快速转账，输入收款账号，收款人姓名，开户行三者的任意不匹配，
#     预期结果：系统提示：账户和户名不匹配
#     :return:error_prompt
#     '''
#     # 选择操作清单
#     self.queryTransfer_handle.click_action_list_button('//*[contains(@text,"查询转账")]')
#     self.queryTransfer_handle.click_payee_message_button()
#     self.queryTransfer_handle.click_transfer_fast_button()
#     # 收款人信息页面,输入错误的收款名
#     payee_name = self.opera_excel.get_cell(10, 7).value
#     print('payee_name:', payee_name)
#     self.queryTransfer_handle.send_payee_name_code('A3392123')
#     # 判断当所输入账号与预期的不一致时，则输入，否则继续下一步选择银行名称
#     payee_account = self.opera_excel.get_cell(10, 8).value
#     print('payee_account:', payee_account)
#     payee_account_after = 1
#     while payee_account != payee_account_after:
#         # payee_account = '6235 9574 0000 6141 031'
#         # 清除
#         self.queryTransfer_handle.clear_payee_account_code()
#         time.sleep(5)
#         # 输入银行账号
#         self.queryTransfer_handle.send_payee_account_code(payee_account)
#         # 获取输入后的银行账号
#         time.sleep(2)
#         payee_account_after = self.driver.find_elements_by_id('com.gdnybank.m:id/m_combin_edit')[1].get_attribute(
#             "text")
#         print('输入后银行账号：', payee_account_after)
#
#     self.queryTransfer_handle.click_transfer_bank_name_button()
#     time.sleep(2)
#     payee_bank = self.opera_excel.get_cell(10, 9).value
#     print('payee_name:', payee_bank)
#     self.queryTransfer_handle.click_bank_list_list(payee_bank)
#     time.sleep(2)
#     self.queryTransfer_handle.click_submit_transfer_button()
#     time.sleep(2)
#     # 转账页面
#     transfer_amount = self.opera_excel.get_cell(10, 10).value
#     print('transfer_amount:', transfer_amount)
#     self.queryTransfer_handle.send_transfer_amount_code(transfer_amount)
#     self.public_method.swipe_on('up', 10000)
#     self.queryTransfer_handle.click_transfer_tips_head_button()
#     self.queryTransfer_handle.click_submit_transfer_button()
#     # 取温馨提示属性，再返回
#     error_prompt = self.driver.find_element_by_id('com.gdnybank.m:id/tv_metion_msg').get_attribute('text')
#     print('温馨提示6：', error_prompt)
#     self.queryTransfer_handle.click_error_prompt_confirm_button()
#     # 返回到移动银行主页面
#     self.queryTransfer_handle.click_left_head_button_button()
#     return error_prompt
#
#
# def query_transferG_same_payer(self):
#     '''
#     用例编号：111CZSX029,所有功能-查询转账-快速转账
#     测试点：同账户转账，步骤：进入快速转账，收款人与付款人为同一人
#     预期结果：系统提示：转入转出账户不能相同
#     :return:error_prompt
#     '''
#     # 选择操作清单
#     self.queryTransfer_handle.click_action_list_button('//*[contains(@text,"查询转账")]')
#     self.queryTransfer_handle.click_payee_message_button()
#     self.queryTransfer_handle.click_transfer_fast_button()
#     payee_name = self.opera_excel.get_cell(11, 7).value
#     print('payee_name:', payee_name)
#     self.queryTransfer_handle.send_payee_name_code(payee_name)
#     # 判断当所输入账号与预期的不一致时，则输入，否则继续下一步选择银行名称
#     payee_account = self.opera_excel.get_cell(11, 8).value
#     print('payee_account:', payee_account)
#     payee_account_after = 1
#     while payee_account != payee_account_after:
#         # payee_account = '6235 9574 0000 6128 681'
#         # 清除
#         self.queryTransfer_handle.clear_payee_account_code()
#         time.sleep(5)
#         # 输入银行账号
#         self.queryTransfer_handle.send_payee_account_code(payee_account)
#         # 获取输入后的银行账号
#         time.sleep(2)
#         payee_account_after = self.driver.find_elements_by_id('com.gdnybank.m:id/m_combin_edit')[1].get_attribute(
#             "text")
#         print('输入后银行账号：', payee_account_after)
#
#     self.queryTransfer_handle.click_transfer_bank_name_button()
#     time.sleep(2)
#     payee_bank = self.opera_excel.get_cell(11, 9).value
#     print('payee_name:', payee_bank)
#     self.queryTransfer_handle.click_bank_list_list(payee_bank)
#     time.sleep(2)
#     self.queryTransfer_handle.click_submit_transfer_button()
#     time.sleep(2)
#     # 转账页面
#     transfer_amount = self.opera_excel.get_cell(11, 10).value
#     print('transfer_amount:', transfer_amount)
#     self.queryTransfer_handle.send_transfer_amount_code(transfer_amount)
#     self.public_method.swipe_on('up', 10000)
#     self.queryTransfer_handle.click_transfer_tips_head_button()
#     self.queryTransfer_handle.click_submit_transfer_button()
#     # 取温馨提示属性，再返回
#     error_prompt = self.driver.find_element_by_id('com.gdnybank.m:id/tv_metion_msg').get_attribute('text')
#     print('温馨提示7：', error_prompt)
#     self.queryTransfer_handle.click_error_prompt_confirm_button()
#     # 返回到移动银行主页面
#     self.queryTransfer_handle.click_left_head_button_button()
#     return error_prompt
#
#
# def query_transferG_drawpassword_wrong(self):
#     '''
#     用例编号：111CZSX030，所有功能-查询转账-快速转账
#     测试点：密码输入错误，步骤：输入错误密码后提交，预期结果：系统提示：您已输错密码[n]次，再输错[3-n]次，将锁定手机盾
#     :return:error_prompt
#     '''
#     # 选择操作清单
#     self.query_transferG_select()
#     # 转账页面
#     self.public_method.swipe_on('up', 10000)
#     transfer_amount = self.opera_excel.get_cell(12, 10).value
#     print('transfer_amount:', transfer_amount)
#     self.queryTransfer_handle.send_transfer_amount_code(transfer_amount)
#     self.queryTransfer_handle.click_transfer_tips_head_button()
#     self.queryTransfer_handle.click_submit_transfer_button()
#     # 验证码和取款密码输入页面
#     self.public_method.swipe_on('up', 10000)
#     self.queryTransfer_handle.click_get_code_button()
#     self.queryTransfer_handle.send_input_code_code()
#     self.queryTransfer_handle.click_draw_password_button()
#     draw_password = self.opera_excel.get_cell(12, 6).value
#     print('draw_password:', draw_password)
#     self.queryTransfer_handle.send_draw_password_code(draw_password)
#     self.queryTransfer_handle.click_input_code_code()  # 在输入取款密码后，银行自带键盘会挡住“转账”按钮
#     self.queryTransfer_handle.click_transfer_account_submit_button()
#     # 取温馨提示属性，再返回
#     error_prompt = self.driver.find_element_by_id('com.gdnybank.m:id/tv_metion_msg').get_attribute('text')
#     print('温馨提示8：', error_prompt)
#     self.queryTransfer_handle.click_error_prompt_confirm_button()
#     # 返回转账页面
#     self.queryTransfer_handle.click_left_head_button_button()
#     # 返回到移动银行主页面
#     self.queryTransfer_handle.click_left_head_button_button()
#     return error_prompt
#
#
# def query_transferG_drawpassword_again(self):
#     '''
#     用例编号：111CZSX031，所有功能-查询转账-快速转账
#     测试点：密码输入错误，再输入正确，步骤：输入错误密码次数小于3次，再输入正确密码，点击提交，
#     预期结果：成功提交，并且错误次数重置
#     :return:transfer_submitted_mark
#     '''
#     # 取款密码错误
#     self.query_transferG_drawpassword_wrong()
#     # 取款密码错误后，再次输入正常密码
#     self.queryTransfer_handle.click_get_code_button()
#     self.queryTransfer_handle.send_input_code_code()
#     self.queryTransfer_handle.click_draw_password_button()
#     draw_password = self.opera_excel.get_cell(13, 6).value
#     print('draw_password:', draw_password)
#     self.queryTransfer_handle.send_draw_password_code(draw_password)
#     self.queryTransfer_handle.click_input_code_code()  # 在输入取款密码后，银行自带键盘会挡住“转账”按钮
#     self.queryTransfer_handle.click_transfer_account_submit_button()
#     # 转账成功页面
#     time.sleep(3)
#     transfer_submitted_mark = self.driver.find_element_by_id \
#         ('com.gdnybank.m:id/tv_repay_already_submit').get_attribute("text")
#     print('转账成功提示：', transfer_submitted_mark)
#     time.sleep(3)
#     remaining_balance = self.driver.find_element_by_id \
#         ('com.gdnybank.m:id/tv_ava_balance_success').get_attribute("text")
#     print('余额：', remaining_balance)
#     self.queryTransfer_handle.click_inform_success_button()  # 点击“好，我知道了”按钮后，跳转到移动银行主页
#     return transfer_submitted_mark
#
#
# def query_transferG_drawpassword_lock(self):
#     '''
#     用例编号：111CZSX032，所有功能-查询转账-快速转账
#     测试点：密码输入错误达到5次锁定，步骤：输入错误密码次数达到3次，点击提交
#     预期结果：系统提示：已锁定
#     :return:
#     '''
#     # 选择操作清单
#     self.query_transferG_select()
#     # 转账页面
#     self.public_method.swipe_on('up', 10000)
#     transfer_amount = self.opera_excel.get_cell(14, 10).value
#     print('transfer_amount:', transfer_amount)
#     self.queryTransfer_handle.send_transfer_amount_code(transfer_amount)
#     self.queryTransfer_handle.click_transfer_tips_head_button()
#     self.queryTransfer_handle.click_submit_transfer_button()
#     # 验证码和取款密码输入页面
#     self.public_method.swipe_on('up', 10000)
#     self.queryTransfer_handle.click_get_code_button()
#     self.queryTransfer_handle.send_input_code_code()
#     self.queryTransfer_handle.click_draw_password_button()
#     # 输入取款密码错误3次，则锁卡
#     for i in range(3):
#         draw_password = self.opera_excel.get_cell(14, 6).value
#         print('draw_password:', draw_password)
#         self.queryTransfer_handle.send_draw_password_code(draw_password)
#         self.queryTransfer_handle.click_input_code_code()  # 在输入取款密码后，银行自带键盘会挡住“转账”按钮
#         self.queryTransfer_handle.click_transfer_account_submit_button()
#         # 取温馨提示属性，再返回
#         error_prompt = self.driver.find_element_by_id('com.gdnybank.m:id/tv_metion_msg').get_attribute('text')
#         print('温馨提示9：', error_prompt)
#         self.queryTransfer_handle.click_error_prompt_confirm_button()
#         return error_prompt
#     # 返回转账页面
#     self.queryTransfer_handle.click_left_head_button_button()
#     # 返回到移动银行主页面
#     self.queryTransfer_handle.click_left_head_button_button()
#     # return error_prompt
#
#
# def query_transferG_drawpassword_lack(self):
#     '''
#     用例编号：111CZSX033，所有功能-查询转账-快速转账
#     测试点：密码输入字数不足，步骤：输入小于6位数的密码，点击提交
#     预期结果：取款密码输入不正确，请重新输入
#     :return:
#     '''
#     # 选择操作清单
#     self.query_transferG_select()
#     # 转账页面
#     self.public_method.swipe_on('up', 10000)
#     transfer_amount = self.opera_excel.get_cell(15, 10).value
#     print('transfer_amount:', transfer_amount)
#     self.queryTransfer_handle.send_transfer_amount_code(transfer_amount)
#     self.queryTransfer_handle.click_transfer_tips_head_button()
#     self.queryTransfer_handle.click_submit_transfer_button()
#     # 验证码和取款密码输入页面
#     self.public_method.swipe_on('up', 10000)
#     self.queryTransfer_handle.click_get_code_button()
#     self.queryTransfer_handle.send_input_code_code()
#     self.queryTransfer_handle.click_draw_password_button()
#     draw_password = self.opera_excel.get_cell(15, 6).value
#     print('draw_password:', draw_password)
#     self.queryTransfer_handle.send_draw_password_code(draw_password)
#     self.queryTransfer_handle.click_input_code_code()  # 在输入取款密码后，银行自带键盘会挡住“转账”按钮
#     self.queryTransfer_handle.click_transfer_account_submit_button()
#
#     # 取温馨提示属性，再返回
#     error_prompt = self.driver.find_element_by_id('com.gdnybank.m:id/tv_metion_msg').get_attribute('text')
#     print('温馨提示10：', error_prompt)
#     self.queryTransfer_handle.click_error_prompt_confirm_button()
#     # 返回转账页面
#     self.queryTransfer_handle.click_left_head_button_button()
#     # 返回到移动银行主页面
#     self.queryTransfer_handle.click_left_head_button_button()
#     return error_prompt
#
#
# def query_transferG_drawpassword_excess(self):
#     '''
#     用例编号：111CZSX034，所有功能-查询转账-快速转账
#     测试点：输入超过6位的密码，步骤：输入超过6位的密码，点击提交
#     预期结果：无法输入，最多输入到6位
#     :return:
#     '''
#     # 选择操作清单
#     self.query_transferG_select()
#     # 转账页面
#     self.public_method.swipe_on('up', 10000)
#     transfer_amount = self.opera_excel.get_cell(16, 10).value
#     print('transfer_amount:', transfer_amount)
#     self.queryTransfer_handle.send_transfer_amount_code(transfer_amount)
#     self.queryTransfer_handle.click_transfer_tips_head_button()
#     self.queryTransfer_handle.click_submit_transfer_button()
#     # 验证码和取款密码输入页面
#     self.public_method.swipe_on('up', 10000)
#     self.queryTransfer_handle.click_get_code_button()
#     self.queryTransfer_handle.send_input_code_code()
#     self.queryTransfer_handle.click_draw_password_button()
#     draw_password = self.opera_excel.get_cell(16, 6).value
#     print('draw_password:', draw_password)
#     self.queryTransfer_handle.send_draw_password_code(draw_password)
#     self.queryTransfer_handle.click_input_code_code()  # 在输入取款密码后，银行自带键盘会挡住“转账”按钮
#     self.queryTransfer_handle.click_transfer_account_submit_button()
#
#     # 取温馨提示属性，再返回
#     element_exist = self.driver.find_element_by_id('com.gdnybank.m:id/fail_title_tv')
#     print('温馨提示11：', element_exist)
#     if element_exist:
#         self.queryTransfer_handle.click_error_prompt_confirm_button()
#         # 返回转账页面
#         self.queryTransfer_handle.click_left_head_button_button()
#         # 返回到移动银行主页面
#         self.queryTransfer_handle.click_left_head_button_button()
#     return element_exist
#
#
# def query_transferG_bank_list(self):
#     '''
#     用例编号：111CZSX035，所有功能-查询转账-快速转账
#     测试点：银行列表，步骤：在快速转账里点击“银行名称”
#     预期结果：进入银行列表
#     :return:
#     '''
#     # 选择操作清单
#     self.queryTransfer_handle.click_action_list_button('//*[contains(@text,"查询转账")]')
#     self.queryTransfer_handle.click_payee_message_button()
#     self.queryTransfer_handle.click_transfer_fast_button()
#     self.queryTransfer_handle.click_transfer_bank_name_button()
#
#     # 取温馨提示属性，再返回
#     element_exist = self.queryTransfer_page.get_bank_list_element().is_enabled()
#     # self.driver.find_element_by_id('com.gdnybank.m:id/lv_bank_list')
#     print('银行列表元素存在：', element_exist)
#     if element_exist:
#         # 返回收款人信息页面
#         self.queryTransfer_handle.click_left_head_button_button()
#         # 返回转账页面
#         self.queryTransfer_handle.click_left_head_button_button()
#         # 返回到移动银行主页面
#         self.queryTransfer_handle.click_left_head_button_button()
#     return element_exist
#
#
# def query_transferG_bank_search(self):
#     '''
#     用例编号：111CZSX036，所有功能-查询转账-快速转账
#     测试点：搜索银行名称，步骤：在银行列表搜索栏里输入银行名称，点击搜索
#     预期结果：能搜索出该银行（支持模糊搜索）
#     :return:
#     '''
#     # 选择操作清单
#     self.queryTransfer_handle.click_action_list_button('//*[contains(@text,"查询转账")]')
#     self.queryTransfer_handle.click_payee_message_button()
#     self.queryTransfer_handle.click_transfer_fast_button()
#     self.queryTransfer_handle.click_transfer_bank_name_button()
#     search_bank = self.opera_excel.get_cell(18, 12).value
#     print('search_bank:', search_bank)
#     self.queryTransfer_handle.send_search_bank_code(search_bank)
#     self.queryTransfer_handle.click_search_button_button()
#
#     # 取温馨提示属性，再返回
#     search_bank_element = self.opera_excel.get_cell(18, 13).value
#     print('search_bank_element:', search_bank_element)
#     element_exist = self.queryTransfer_page.get_bank_list_element().find_element_by_xpath(search_bank_element)
#     print('获取银行元素：', element_exist)
#     if element_exist:
#         # 返回收款人信息页面
#         self.queryTransfer_handle.click_left_head_button_button()
#         # 返回转账页面
#         self.queryTransfer_handle.click_left_head_button_button()
#         # 返回到移动银行主页面
#         self.queryTransfer_handle.click_left_head_button_button()
#     return element_exist
#
#
# def query_transferG_payee_list(self):
#     '''
#     用例编号：111CZSX037，所有功能-查询转账-快速转账
#     测试点：收款人名册，步骤：进入快速转账，点击账户姓名右侧的图标
#     预期结果：进入收款人列表，列表内显示进行过交易的收款人信息
#     :return:
#     '''
#     # 选择操作清单
#     self.queryTransfer_handle.click_action_list_button('//*[contains(@text,"查询转账")]')
#     self.queryTransfer_handle.click_payee_message_button()
#     self.queryTransfer_handle.click_transfer_fast_button()
#     self.queryTransfer_handle.click_transfer_payee_head_button()
#
#     # 取温馨提示属性，再返回
#     # 取的是收款人列表的银行卡号元素
#     element_exist = self.driver.find_elements_by_id('com.gdnybank.m:id/tv_card_num')
#     print('获取收款人列表元素：', element_exist)
#     if element_exist:
#         # 返回收款人信息页面
#         self.queryTransfer_handle.click_left_head_button_button()
#         # 返回转账页面
#         self.queryTransfer_handle.click_left_head_button_button()
#         # 返回到移动银行主页面
#         self.queryTransfer_handle.click_left_head_button_button()
#     return element_exist
#
#
# def query_transferG_payee_choice(self):
#     '''
#     用例编号：111CZSX038，所有功能-查询转账-快速转账
#     测试点：选择收款人，步骤：在收款人列表，点击其中一个收款人信息
#     预期结果：自动返回上一页面，且账户姓名、收款人账号、银行名称已自动填写为选择的收款人信息
#     :return:
#     '''
#     # 选择操作清单
#     self.queryTransfer_handle.click_action_list_button('//*[contains(@text,"查询转账")]')
#     self.queryTransfer_handle.click_payee_message_button()
#     self.queryTransfer_handle.click_transfer_fast_button()
#     self.queryTransfer_handle.click_transfer_payee_head_button()
#
#     # 选择收款人页面列表，具体的收款人在excel维护
#     payee_name = self.opera_excel.get_cell(20, 7).value
#     print('payee_name:', payee_name)
#     self.queryTransfer_handle.click_bank_list_list(payee_name)
#     # driver.find_elements_by_class_name("android.wdget.RelativeLayout").__getitem__(1).click()
#
#     # 返回到收款人信息页面，取的是收款人账号元素
#     element_code = self.queryTransfer_page.get_payee_account_element().get_attribute("text")
#     # self.driver.find_element_by_id('com.gdnybank.m:id/tv_card_num')
#     print('获取到的元素：', element_code)
#     element_length = len(element_code)
#     print('元素长度：', element_length)
#     element_compare = (element_length > 8)  # 考虑到还没输入账号时，是5位字符，账号可能至少有8位
#     if element_compare:
#         # 返回转账页面
#         self.queryTransfer_handle.click_left_head_button_button()
#         # 返回到移动银行主页面
#         self.queryTransfer_handle.click_left_head_button_button()
#     return element_compare
#
#
# def query_transferG_payee_add(self):
#     '''
#     用例编号：111CZSX039，所有功能-查询转账-快速转账
#     测试点：添加收款人，步骤：进行一笔快速转账交易
#     预期结果：交易成功后自动将该收款人添加进收款人名册
#     :return: payeelist_compare
#     '''
#
#     # 选择操作清单
#     self.queryTransfer_handle.click_action_list_button('//*[contains(@text,"查询转账")]')
#     self.queryTransfer_handle.click_payee_message_button()
#     self.queryTransfer_handle.click_transfer_fast_button()
#     self.queryTransfer_handle.click_transfer_payee_head_button()
#
#     # 添加收款人前的收款人清单数量
#     # payeelist_before = self.queryTransfer_page.get_bank_list_card_element()
#     # print('添加前元素：' ,payeelist_before)
#     payeelist_length_before = len(self.queryTransfer_page.get_bank_list_card_element())
#     print('添加前：', payeelist_length_before)
#
#     # 返回转账页面
#     self.queryTransfer_handle.click_left_head_button_button()
#     payee_name = self.opera_excel.get_cell(21, 7).value
#     print('payee_name:', payee_name)
#     self.queryTransfer_handle.send_payee_name_code(payee_name)
#
#     # 判断当所输入账号与预期的不一致时，则输入，否则继续下一步选择银行名称
#     payee_account = self.opera_excel.get_cell(21, 8).value
#     print('payee_account:', payee_account)
#     payee_account_after = 1
#     while payee_account != payee_account_after:
#         # payee_account = '6235 9574 0000 6140 496'
#         # 清除
#         self.queryTransfer_handle.clear_payee_account_code()
#         time.sleep(5)
#         # 输入银行账号
#         self.queryTransfer_handle.send_payee_account_code(payee_account)
#         # 获取输入后的银行账号
#         time.sleep(2)
#         payee_account_after = self.driver.find_elements_by_id('com.gdnybank.m:id/m_combin_edit')[1].get_attribute(
#             "text")
#         print('输入后银行账号：', payee_account_after)
#
#     self.queryTransfer_handle.click_transfer_bank_name_button()
#     time.sleep(2)
#     payee_bank = self.opera_excel.get_cell(21, 9).value
#     print('payee_bank:', payee_bank)
#     self.queryTransfer_handle.click_bank_list_list(payee_bank)
#     time.sleep(2)
#     self.queryTransfer_handle.click_submit_transfer_button()
#     time.sleep(2)
#     # 调用转账页面方法
#     self.query_transfer_page()
#
#     # 选择操作清单
#     self.queryTransfer_handle.click_action_list_button('//*[contains(@text,"查询转账")]')
#     self.queryTransfer_handle.click_payee_message_button()
#     self.queryTransfer_handle.click_transfer_fast_button()
#     self.queryTransfer_handle.click_transfer_payee_head_button()
#
#     # 添加新的收款人后的收款人清单数量
#     # payeelist_after = self.queryTransfer_page.get_bank_list_card_element()
#     payeelist_length_after = len(self.queryTransfer_page.get_bank_list_card_element())
#     print('添加后：', payeelist_length_after)
#     payeelist_compare = (payeelist_length_before < payeelist_length_after)
#     print('对比结果：', payeelist_compare)
#     if payeelist_compare:
#         # 返回收款人信息页面
#         self.queryTransfer_handle.click_left_head_button_button()
#         # 返回转账页面
#         self.queryTransfer_handle.click_left_head_button_button()
#         # 返回到移动银行主页面
#         self.queryTransfer_handle.click_left_head_button_button()
#     return payeelist_compare
#
#
# def query_transferG_payee_delete_before(self):
#     '''
#     用例编号：111CZSX040，所有功能-查询转账-快速转账
#     测试点：删除收款人，步骤：在收款人列表，点击右上角编辑，然后点击某收款人左侧删除按钮
#     预期结果：成功删除该收款人信息
#     本方法是记录删除前得到需要删除的选项，返回i
#     :return: i
#     '''
#     # 选择操作清单
#     self.queryTransfer_handle.click_action_list_button('//*[contains(@text,"查询转账")]')
#     self.queryTransfer_handle.click_payee_message_button()
#     self.queryTransfer_handle.click_transfer_fast_button()
#     self.queryTransfer_handle.click_transfer_payee_head_button()
#
#     self.queryTransfer_handle.click_payee_list_edit_button()
#     # 获取要删除的收款人元素-》再获取按照银行名称查询的id定位元素-》for再while语句判断删除收款人元素排在第几位，得到i+1
#     # 最后使用删除按钮find_elements_by_id('删除id')[i+1].click()
#     # target_element = self.queryTransfer_page.get_bank_list_element() \
#     #     .find_element_by_xpath('//*[contains(@text,"A3338")]')
#     payee_name_target = self.opera_excel.get_cell(22, 14).value
#     print('payee_name_target:', payee_name_target)
#
#     targets_element = self.driver.find_elements_by_id('com.gdnybank.m:id/tv_name_payee_contant_item')
#     # print('收款人列表元素：' ,targets_element)
#     targets_element_length = len(targets_element)
#     print('收款人列表元素长度：', targets_element_length)
#     for i in range(targets_element_length):
#         payee_name = targets_element[i].get_attribute('text')
#         print('第' + str(i) + '收款人名字：', payee_name)
#         if payee_name_target == payee_name:
#             print('收款人元素数组：', i)
#             return i
#
#
# def query_transferG_payee_delete(self):
#     '''
#     用例编号：111CZSX040，所有功能-查询转账-快速转账
#     测试点：删除收款人，步骤：在收款人列表，点击右上角编辑，然后点击某收款人左侧删除按钮
#     预期结果：成功删除该收款人信息
#     :return: payeelist_compare_length
#     '''
#     # 调用删除前需要删除的元素第几位元素
#     j = self.query_transferG_payee_delete_before()
#     print('取到值：', j)
#     # 删除收款人前的收款人清单数量
#     payeelist_length_before = len(self.queryTransfer_page.get_bank_list_card_element())
#     print('删除前长度：', payeelist_length_before)
#     delete_element = self.driver.find_elements_by_id('com.gdnybank.m:id/btn_del_payee_contact_item')[j]
#     delete_element.click()
#     # self.queryTransfer_handle.click_payee_delete_button()
#     payeelist_length_after = len(self.queryTransfer_page.get_bank_list_card_element())
#     print('删除后长度：', payeelist_length_after)
#     payeelist_compare = (payeelist_length_before > payeelist_length_after)
#     print('对比结果：', payeelist_compare)
#     if payeelist_compare:
#         self.queryTransfer_handle.click_payee_list_complete_button()
#         # 返回收款人信息页面
#         self.queryTransfer_handle.click_left_head_button_button()
#         # 返回转账页面
#         self.queryTransfer_handle.click_left_head_button_button()
#         # 返回到移动银行主页面
#         self.queryTransfer_handle.click_left_head_button_button()
#     return payeelist_compare
#
#
# def query_transferG_payee_cityChoice(self):
#     '''
#     用例编号：111CZSX041，所有功能-查询转账-快速转账
#     测试点：收款支行选择，步骤：点击银行名称进入银行列表，点击某其他银行
#     预期结果：进入支行选择页面
#     :return:
#     '''
#     # 选择操作清单
#     self.queryTransfer_handle.click_action_list_button('//*[contains(@text,"查询转账")]')
#     self.queryTransfer_handle.click_payee_message_button()
#     self.queryTransfer_handle.click_transfer_fast_button()
#     # self.queryTransfer_handle.click_transfer_payee_head_button()
#
#     self.queryTransfer_handle.click_transfer_bank_name_button()
#     payee_bank = self.opera_excel.get_cell(23, 12).value
#     print('payee_bank:', payee_bank)
#     self.queryTransfer_handle.click_bank_list_list(payee_bank)
#     # 进入南粤银行以外的银行，显示支行信息
#     # 获取支行页面的关键字来验证
#     self.queryTransfer_handle.click_search_city_button()
#     # 如果选择非广州的城市，则需要先查询，但如果是热门城市，搜索再选择，会有两个搜索结果
#     # self.queryTransfer_handle.send_search_city_code('广州')
#     # self.queryTransfer_handle.click_city_branch_search_button()
#     # 可能是find_elements
#     city = self.opera_excel.get_cell(23, 15).value
#     print('city:', city)
#     citys_element = self.driver.find_elements_by_id('com.gdnybank.m:id/city')
#     # print('城市列表元素：' ,citys_element)
#     citys_element_length = len(citys_element)
#     print('城市列表元素长度：', citys_element_length)
#     for i in range(citys_element_length):
#         city_name = citys_element[i].get_attribute('text')
#         print('第' + str(i) + '城市：', city_name)
#         if city == city_name:
#             # print('城市元素数组：', i)
#             return i
#
#
# def query_transferG_payee_branch(self):
#     '''
#     用例编号：111CZSX041，所有功能-查询转账-快速转账
#     测试点：收款支行选择，步骤：点击银行名称进入银行列表，点击某其他银行
#     预期结果：进入支行选择页面
#     :return:
#     '''
#     # 调用查看前需要搜索城市在第几位元素
#     j = self.query_transferG_payee_cityChoice()
#     # print('城市元素取到值：',j)
#     city_elements = self.queryTransfer_page.get_city_list_element()[j]
#     city_elements.click()
#     self.queryTransfer_handle.click_branch_search_button()
#     branch_amount = self.queryTransfer_page.get_branch_bank_amount_element().get_attribute('text')
#     print('获取的属性：', branch_amount)
#     branch_amountRe = re.sub("\D", "", branch_amount)
#     print('抽取出来的数字有：', branch_amountRe)
#     compare_branch_amount = branch_amountRe > '0'
#     if compare_branch_amount:
#         for i in range(4):
#             self.queryTransfer_handle.click_left_head_button_button()
#     return compare_branch_amount
#
#
# def query_transferG_payee_city(self):
#     '''
#     用例编号：111CZSX042，所有功能-查询转账-快速转账
#     测试点：选择转入账号城市，步骤：点击城市名称搜索栏
#     预期结果：弹出城市列表
#     :return:
#     '''
#     # 选择操作清单
#     self.queryTransfer_handle.click_action_list_button('//*[contains(@text,"查询转账")]')
#     self.queryTransfer_handle.click_payee_message_button()
#     self.queryTransfer_handle.click_transfer_fast_button()
#     # self.queryTransfer_handle.click_transfer_payee_head_button()
#
#     self.queryTransfer_handle.click_transfer_bank_name_button()
#     payee_bank = self.opera_excel.get_cell(24, 12).value
#     print('payee_bank:', payee_bank)
#     self.queryTransfer_handle.click_bank_list_list(payee_bank)
#     # 进入南粤银行以外的银行，显示支行信息
#     # 获取支行页面的关键字来验证
#
#     self.queryTransfer_handle.click_search_city_button()
#     verify_title = '城市列表'
#     city_list = self.queryTransfer_page.get_title_head_element().get_attribute('text')
#     print('获取到的头条标题：', city_list)
#     city_compare = (city_list == verify_title)
#     print('城市列表对比结果：', city_compare)
#     if city_list == verify_title:
#         for i in range(5):
#             self.queryTransfer_handle.click_left_head_button_button()
#     return city_list
#
#
# def query_transferG_branch_keyword(self):
#     '''
#     用例编号：111CZSX043，所有功能-查询转账-快速转账
#     测试点：支行关键字搜索，步骤：选择城市后，输入关键字进行搜索
#     预期结果：成功搜索出该城市下有该关键字的支行
#     :return:
#     '''
#     # 调用查看前需要搜索城市在第几位元素
#     j = self.query_transferG_payee_cityChoice()
#     print('城市元素取到值：', j)
#     city_elements = self.queryTransfer_page.get_city_list_element()[j]
#     city_elements.click()
#     self.queryTransfer_handle.click_branch_search_button()
#     time.sleep(5)
#     branch_amount = self.queryTransfer_page.get_branch_bank_amount_element().get_attribute('text')
#     print('获取的属性：', branch_amount)
#     branch_amountRe = re.sub("\D", "", branch_amount)
#     print('抽取出来的数字有：', branch_amountRe)
#     compare_branch_amount = branch_amountRe > '0'
#     if compare_branch_amount:
#         print('查询分行信息正常')
#     branchKeyword = self.opera_excel.get_cell(25, 16).value
#     self.queryTransfer_handle.send_branch_keyword_code(branchKeyword)
#     self.queryTransfer_handle.click_branch_search_button()
#     branch_bank = self.queryTransfer_page.get_branch_bank_keyword_element()
#     print('分行查询结果元素：', branch_bank)
#     if branch_bank != None:
#         for i in range(4):
#             self.queryTransfer_handle.click_left_head_button_button()
#     return branch_bank
#
#
# def query_transferG_account_detail(self):
#     '''
#     用例编号：111CZSX044，所有功能-查询转账-快速转账
#     测试点：查看账户详情，步骤：点击卡片右下角的感叹号
#     预期结果：进入对应账户的详情页面
#     :return:
#     '''
#     # 选择操作清单
#     self.queryTransfer_handle.click_action_list_button('//*[contains(@text,"查询转账")]')
#     time.sleep(2)
#     self.queryTransfer_handle.click_account_plaint_button()
#     # 获取账户详情的元素
#     # 再打印账户详情的信息点到excel
#     account_amount = len(self.queryTransfer_page.get_account_types_element())
#     print('账户种类：', account_amount)
#     account_message = []
#     if account_amount > 0:
#         for i in range(account_amount):
#             account_types = self.queryTransfer_page.get_account_types_element()
#             account_balances = self.queryTransfer_page.get_account_balance_element()
#             regist_dates = self.queryTransfer_page.get_regist_date_element()
#             acc_type = "acc_type" + str(i)
#             account_balance = "account_balance" + str(i)
#             regist_date = "regist_date" + str(i)
#             print('赋值：', acc_type, ",", account_balance, ",", regist_date)
#             acc_type = account_types[i].get_attribute('text')
#             account_balance = account_balances[i].get_attribute('text')
#             regist_date = regist_dates[i].get_attribute('text')
#             account_message.append(acc_type)
#             account_message.append(account_balance)
#             account_message.append(regist_date)
#             print('第' + str(i) + '账户种类：', acc_type)
#             print('第' + str(i) + '账户余额：', account_balance)
#             print('第' + str(i) + '开户日期：', regist_date)
#             print('列表：', account_message)
#             self.opera_excel.write_value(26, 17, account_message)
#
#         for j in range(2):
#             self.queryTransfer_handle.click_left_head_button_button()
#     else:
#         return None
#     return account_amount

# 测试for循环后再打印for的值
# from util.write_excel import Write_Excel
# write_excel = Write_Excel('E:\\AppiumProjectAndroid\\config\\test.xlsx')
# list = []
# for i in range(3):
#     j = i + 1
#     print('j值：', j)
#     list.append(j)
# # print('最后的j值：', j)
# print('最后list列表值：', list)
# str = "".join(str(list))
# print('list转str1:', str)
# list1 = ['123', 'sjhid', 'dhi']
# str1 = ",".join(list1)
# print('list转str2:', str1)
# # write_excel.write(8, 8, list)
# for ii in list1:
#     print('ii:', ii)
#     sep = ','
#     write_excel.write(8, 8, sep.join(list))
    # write_excel.write(8, 8 ,"n")
# list = ['foo', 'bar']
# list.append("item")
# fl=open('list.txt', 'w')
# for i in list:
#     fl.write(i)
#     fl.write("\n")
# fl.close()

# 参考：https://testerhome.com/topics/6267
# 调试一个个字符输入银行卡号
# class PressKeycode:
#     def __init__(self, driver):
#         self.driver = driver
#     # 验证使用press_Keycode方法来输入银行卡号
#     def press_Keycode(self,stringInput,element):
#     #将手机号字符串转化成字符数组
#         input_str=(','.join(stringInput)).split(',')
#         print('input_str方法press_Keycode:', input_str)
#         #通过模拟物理按键用for循环每次输入一个字符输入手机号
#         for i in range(len(input_str)):
#         #用press_keycode方法模拟键盘逐个字符输入
#             print('int(input_str[' + str(i) + ']:', int(input_str[i]))
#             self.driver.press_keycode(int(input_str[i]) + 7)
#         #通过当前输入框内内容的长度来判断前端加空格截断后是否有多输入，有则删除多输入的
#             if len((element.text).replace(" ", "")) > i+1:
#                 self.driver.press_keycode(67)
#         #保持焦点在输入框内且每次输入单个字符后，将光标置到最后
#                 if i == len(input_str)/2:
#                     print('len(input_str)/2:', len(input_str)/2)
#                     element.click()
#                     self.driver.press_keycode(123)

# press_Keycode('1583993949940','element')

# 过滤数字间空格
# bankCard_num = '6235 9574 0000 2044 411'
# bankCard_num_split = bankCard_num.split()
# print('bankCard_num_split:', bankCard_num_split)
# bankCard_num_str = "".join(bankCard_num_split)
# print('bankCard_num_str:', bankCard_num_str)

# # range()调试
# for i in range(3):
#     print('第' + str(i) + ':', i)

# 调试弹框 点击press按钮即可关闭弹框

# -*- coding: cp936 -*-
'''
文件名：pop_up_box.py
作用：弹框输入数字
参考：http://www.cnblogs.com/kaituorensheng/p/3287652.html
作者：曾志坤，时间：20180408
'''

# from tkinter import *
# import tkinter as tk
#
# class PopUpBox:
#     def __init__(self, master=None):
#     # def pop_up_frame(self, master=None):
#         self.master=master
#     # def pop_up_frame(self):
#         print('self.master:', self.master)
#         self.master.resizable(width = False, height = False)
#         self.master.title('验证码')
#         self.master.iconify = False
#         self.master.deiconify = False
#         self.master.grab_set = True
#         # 创建单行文本框
#         self.var = StringVar()
#         text_box = Entry(self.master, textvariable=self.var)
#         self.var.set(" ")
#         text_box.pack()
#         text_string = self.var.get()
#         print('文本内容：', text_string)
#
#
#         #创建按钮
#         Button(self.master, text = "press", command = self.close ).pack()
#         # 返回文本框的内容
#         # return text_string
#
#     def close(self):
#         self.master.destroy()

    # def PopUPFrame(self):
    #     #弹出框面板
    #     root = Tk()
    #     frm = Frame(root)
    #     frm.pack()
    #
    #     #弹出框标题
    #     root.title("验证码")
    #     root.geometry('250x100')
    #
    #     #创建单行文本框
    #     self.var = StringVar()
    #     e = Entry(root, textvariable=self.var)
    #     self.var.set(" ")
    #     e.pack()
    #
    #     # #向该空间内输入文本
    #     # self.t = Text()
    #     # self.t.pack()
    #
    #     #创建按钮
    #     # Button(root, text="press", command=self.printhello).pack()
    #     Button(root, text="press").pack()
    #     # 当执行.py 文件后，在点击按钮退出。就正常了
    #     # Button(root, text="press", command = root.quit).pack()
    #     # Button(root, text="press", command=self.close).pack()
    #     #进入消息循环
    #     root.mainloop()
    #
    #     return self.var.get()



# root = PopUpBox()
# root.PopUPFrame()

# if __name__ == '__main__':
#     root = tk.Tk()
#     pop_up_box = PopUpBox(master = root)
#     mainloop()
# from util.pop_up_box import PopUpBox
# # pop_up_box = PopUpBox()
# code = PopUpBox().PopUPFrame()
# print('输入code:', code)